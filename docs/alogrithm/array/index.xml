<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数组 on LEARN</title>
    <link>https://sammyyx.github.io/docs/alogrithm/array/</link>
    <description>Recent content in 数组 on LEARN</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://sammyyx.github.io/docs/alogrithm/array/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>双指针</title>
      <link>https://sammyyx.github.io/docs/alogrithm/array/%E5%8F%8C%E6%8C%87%E9%92%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sammyyx.github.io/docs/alogrithm/array/%E5%8F%8C%E6%8C%87%E9%92%88/</guid>
      <description>双指针 # 两数之和 # 排序
使数组成为有序数组 左右指针
左右指针分别指向数组第一个元素和数组最后一个元素 num[left]+num[right]&amp;gt;target:right--; num[left]+num[right]&amp;lt;target:left++; public int[] twoSum(int[] numbers, int target) { int left = 0; int right = numbers.length - 1; while (left &amp;lt; right) { int p = numbers[left] + numbers[right]; if (p == target) { return new int[]{left+1, right+1}; } else if (p &amp;gt; target) { right--; } else { left++; } } return null; } 三数之和 # two sum 改造</description>
    </item>
    
    <item>
      <title>Java 技巧</title>
      <link>https://sammyyx.github.io/docs/alogrithm/array/java%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sammyyx.github.io/docs/alogrithm/array/java%E6%8A%80%E5%B7%A7/</guid>
      <description> Java 技巧 # 数组排序 # Arrays
Arrays 工具类中封装了大量的排序算法, 对于升序排序, 直接使用 Arrays.sort 即可. 如果想对数组类进行逆序排序/自定义comparator排序 包装类 Arrays.sort(array, Arrays.sort(nums, (a,b)-&amp;gt;{return b-a;});) 基本类型 int[] sorted = Arrays.stream(nums).boxed().sorted((a,b)-&amp;gt;{return b-a;}).mapToInt(a-&amp;gt;a).toArray(); 数组转换 # 基本类型数组-&amp;gt;包装类数组
Integer[] sorted = Arrays.stream(nums).boxed().toArray(Integer[]::new); 基本类型数组-&amp;gt;包装类集合
List&amp;lt;Integer&amp;gt; array = Arrays.stream(nums).boxed().collect(Collectors.toList()); 集合排序 # Collections
Collections.sort(array, (a,b)-&amp;gt;{return b-a;}); 集合转换 # 包装类集合-&amp;gt;包装类数组
Integer[] nums = array.stream().toArray(Integer[]::new); </description>
    </item>
    
  </channel>
</rss>
